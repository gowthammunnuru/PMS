// Generated by CoffeeScript 1.9.1
"use strict";
angular.module("perform").directive("ninebox", [
  "NineBox", "$window", "Colors", function(NineBox, $window, Colors) {
    return {
      restrict: "E",
      templateUrl: "static/widgets/ninebox.html",
      link: function(scope, element, attrs) {
        scope.cellheight = attrs.cellheight;
        scope.metadata = [
          {
            title: "Emerging",
            rank: "C",
            index_str: "zero"
          }, {
            title: "Rising Star",
            rank: "B",
            index_str: "one"
          }, {
            title: "Superstar",
            rank: "A",
            index_str: "two"
          }, {
            title: "Requires Attention",
            rank: "D",
            index_str: "three"
          }, {
            title: "Solid",
            rank: "C",
            index_str: "four"
          }, {
            title: "High Performer",
            rank: "B",
            index_str: "five"
          }, {
            title: "Unacceptable",
            rank: "E",
            index_str: "six"
          }, {
            title: "Specific Castability",
            rank: "D",
            index_str: "seven"
          }, {
            title: "Key Contributor",
            rank: "C",
            index_str: "eight"
          }
        ];
        scope.colors = {
          A: Colors.colorScheme.darkgreen,
          B: Colors.colorScheme.green,
          C: Colors.colorScheme.lightgreen,
          D: Colors.colorScheme.lime,
          E: Colors.colorScheme.amber
        };
        scope.NineBox = NineBox;
        scope.update = function() {
          var i, item, j, len, len1, nineBoxData, positions, ref, ref1, results, review, user, x, y;
          scope.matrix = [[[], [], []], [[], [], []], [[], [], []]];
          positions = (function() {
            var i, len, ref, results;
            ref = scope.reviews;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
              review = ref[i];
              results.push(NineBox.calculate(review, scope.template));
            }
            return results;
          })();
          ref = _.zip(scope.users, positions, scope.reviews);
          for (i = 0, len = ref.length; i < len; i++) {
            item = ref[i];
            user = item[0], nineBoxData = item[1], review = item[2];
            x = nineBoxData.pos[0];
            y = nineBoxData.pos[1];
            user.ninebox = nineBoxData;
            user.review = review;
            scope.matrix[y][x].push(user);
          }
          ref1 = [0, 1, 2];
          results = [];
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            x = ref1[j];
            results.push((function() {
              var k, len2, ref2, results1;
              ref2 = [0, 1, 2];
              results1 = [];
              for (k = 0, len2 = ref2.length; k < len2; k++) {
                y = ref2[k];
                results1.push(scope.matrix[y][x] = _.sortBy(scope.matrix[y][x], function(item) {
                  var ref3, ref4;
                  return -(item != null ? (ref3 = item.ninebox) != null ? (ref4 = ref3.percent) != null ? ref4.reduce(function(a, b) {
                    return a + b;
                  }) : void 0 : void 0 : void 0);
                }));
              }
              return results1;
            })());
          }
          return results;
        };
        scope.$watch('reviews', function(newValue, oldValue) {
          return scope.update();
        }, true);
      }
    };
  }
]);
