// Generated by CoffeeScript 1.10.0
(function() {
  "use strict";
  var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  angular.module("perform").directive("comment", [
    "Reviews", "Auth", function(Reviews, Auth) {
      return {
        restrict: 'E',
        transclude: true,
        scope: true,
        templateUrl: function(element, attrs) {
          if (attrs.mode) {
            return "static/widgets/comment." + attrs.mode + ".html";
          } else {
            return "static/widgets/comment.html";
          }
        },
        compile: function(element, attrs) {
          return {
            pre: function(scope, element, attrs, controller, transclude) {
              transclude(scope, function(items) {
                return scope.prompt = items.text();
              });
            },
            post: function(scope, element, attrs) {
              var ref, uid;
              if (attrs.mode === 'multi' && !scope.user) {
                scope.mode = 'headings_only';
              } else {
                scope.mode = "prompt";
              }
              scope.sanitize = function(string) {
                return string.replace(/\W+/g, '-').toLowerCase();
              };
              scope.modelkey = function(string, namespace) {
                if (namespace == null) {
                  namespace = "";
                }
                return (scope.sanitize(namespace)) + "::" + (scope.sanitize(string));
              };
              if (scope.mode === "headings_only") {
                scope.review = {};
              } else {
                if ((ref = scope.review_type) === "weights-performance" || ref === "weights-potential") {
                  uid = scope.template_id;
                } else {
                  uid = scope.user.uid;
                }
                scope.reviewDetails = Reviews.getReviewPacketByUserAndYear(uid, scope.review_year, scope.review_name, scope.review_type);
                scope.review = scope.reviewDetails.review_body;
                if (scope.reviewDetails.uid !== Auth.getUser().uid && scope.review_type === 'self-review') {
                  scope.notEditable = true;
                }
              }
              scope.shouldHighlight = function(modelkey) {
                return indexOf.call(scope.missingModelKeys, modelkey) >= 0;
              };
              scope.markdownHelp = [
                {
                  title: 'Headings',
                  content: "# Heading 1\n## Heading 2\n### Heading 3\n#### Heading 4\n##### Heading 5\n###### Heading 6",
                  id: 'headings'
                }, {
                  title: 'Paragraphs',
                  content: "One or more consecutive lines of text\nseparated by one or more blank lines.\n\nThis is another paragraph.",
                  id: 'paragraphs'
                }, {
                  title: 'Unordered Lists',
                  content: "* Red\n* Green\n  * Light Green\n* Blue\n\n---\n\n- Red\n- Green\n  - Light Green\n- Blue",
                  id: 'unordered'
                }, {
                  title: 'Ordered Lists',
                  content: "1. Bird\n2. McHale\n3. Parish",
                  id: 'ordered'
                }, {
                  title: 'Bold',
                  content: "I am **bold**\n\nI am __bold too__",
                  id: 'bold'
                }, {
                  title: 'Italic',
                  content: "I am in *italics*\n\nyup _same deal here_",
                  id: 'italic'
                }
              ];
            }
          };
        }
      };
    }
  ]);

}).call(this);
