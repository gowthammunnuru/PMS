// Generated by CoffeeScript 1.10.0
(function() {
  angular.module("perform").controller("AdminCtrl", [
    "$scope", "$state", "$stateParams", "allUsers", "adminData", "WS", "$modal", "Auth", function($scope, $state, $stateParams, allUsers, adminData, WS, $modal, Auth) {
      var authUser, i, j, k, len, len1, len2, ref, ref1, x;
      $scope.review = {
        type: "review"
      };
      $scope._uidToUser = function(listOfUsers) {
        var uid2dict;
        uid2dict = _.groupBy(allUsers, function(user) {
          if (user.uid !== "") {
            return user.uid;
          } else {
            return user.cn;
          }
        });
        return uid2dict;
      };
      $scope.show_archived = false;
      $scope.data = adminData;
      $scope.data.active_review_types = [];
      $scope.data.archived_review_types = [];
      ref = adminData.review_types;
      for (i = 0, len = ref.length; i < len; i++) {
        x = ref[i];
        if (x.status === 'active') {
          $scope.data.active_review_types.push(x);
        }
      }
      ref1 = adminData.review_types;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        x = ref1[j];
        if (x.status === 'archived') {
          $scope.data.archived_review_types.push(x);
        }
      }
      $scope.data.reviews = _.groupBy($scope.data.review_types, function(review) {
        return review.year + "-" + review.rname;
      });
      if ($scope.data.active_review_types) {
        console.log($scope.data.active_review_types.length + " active review types");
      }
      if ($scope.data.archived_review_types) {
        console.log($scope.data.archived_review_types.length + " archived review types");
      }
      $scope.users = [];
      authUser = Auth.getUser();
      for (k = 0, len2 = allUsers.length; k < len2; k++) {
        x = allUsers[k];
        //if (x.active && x.organization === authUser.organization && x.location.id.indexOf('china-offsite') === -1) {
        if (x.active && (x.organization === 'DreamWorks Animation L.L.C.' || x.organization === 'Universal City Studios Productions LLLP') && x.location.id.indexOf('china-offsite') === -1) {
          $scope.users.push(x);
        }
      }
      $scope.user2dept = $scope._uidToUser();
      $scope.backlog = [];
      $scope.allUsersByDept = _.groupBy($scope.users, function(x) {
        return x.ou;
      });
      $scope.showCreateForm = !$scope.data.active_review_types.length ? true : false;
      if ($scope.data.active_review_types.length > 0) {
        $scope._selected_review_type = $scope.data.active_review_types[0];
        $scope.selectedReview = $scope._selected_review_type.year + "-" + $scope._selected_review_type.rname;
      }
      $scope.keypress = function(event, params) {
        if (event.keyCode === 13) {
          return $scope.createReview(params);
        }
      };
      $scope.createReview = function(params) {
        var ref2;
        params.rname = (ref2 = params.desc) != null ? ref2.replace(/[^\w\s]/gi, '').replace(/\ /g, '-').toLowerCase() : void 0;
        return $state.go('admin.reviews', {
          review_year: params.year,
          review_name: params.rname,
          desc: params.desc
        });
      };
      $scope.displayStats = function(review_type) {

        /*
        Change the selected review - and also update the stats
         */
        var grouped_dept, grouped_reviews;
        $scope._selected_review_type = review_type;
        $scope.selectedReview = $scope._selected_review_type.year + "-" + $scope._selected_review_type.rname;
        grouped_reviews = _.groupBy($scope.data.latest_reviews, function(review) {
          return review.year + "-" + review.rname;
        });
        $scope.user2dept = $scope._uidToUser();
        grouped_dept = _.groupBy(grouped_reviews[$scope.selectedReview], $scope._group_dept);
        WS.fetchBacklogStats(review_type.year, review_type.rname).then(function(response) {
          $scope._sortByKey(response, 'count');
          if (response.length > 6) {
            response = response.slice(0, 6);
          }
          $scope.backlog = response;
          return response;
        });
      };
      $scope._sortByKey = function(array, key) {
        return array.sort(function(a, b) {
          var y;
          x = a[key];
          y = b[key];
          if (x < y) {
            return 1;
          } else if (x > y) {
            return -1;
          } else {
            return 0;
          }
        });
      };
      $scope._getLocalUserCount = function() {

        /*
        Returns the number of people at the same site as the logged in user
         */
        var count, len3, m;
        authUser = Auth.getUser();
        count = 0;
        for (m = 0, len3 = allUsers.length; m < len3; m++) {
          x = allUsers[m];
          //if (x.active && x.organization === authUser.organization && x.location.id.indexOf('china-offsite') === -1) {
          if (x.active && (x.organization === 'DreamWorks Animation L.L.C.' || x.organization === 'Universal City Studios Productions LLLP') && x.location.id.indexOf('china-offsite') === -1) {
            count += 1;
          }
        }
        return count;
      };
      $scope._getLocalUserCountByDept = function() {

        /*
        Returns the number of people by department at the same site as the logged in user
         */
        var count, len3, m, ref2;
        authUser = Auth.getUser();
        count = {};
        ref2 = $scope.users;
        for (m = 0, len3 = ref2.length; m < len3; m++) {
          x = ref2[m];
          //if (x.active && x.organization === authUser.organization && x.location.id.indexOf('china-offsite') === -1) {
          if (x.active && (x.organization === 'DreamWorks Animation L.L.C.' || x.organization === 'Universal City Studios Productions LLLP') && x.location.id.indexOf('china-offsite') === -1) {
            if (!count.hasOwnProperty(x.ou)) {
              count[x.ou] = 0;
            }
            count[x.ou] += 1;
          }
        }
        return count;
      };
      $scope._group_dept = function(review) {
        var u;
        u = $scope.user2dept[review.uid];
        if (!u) {
          return 'Not found';
        }
        return u[0].ou;
      };
      $scope.showDepartmentStats = function(reviewKey) {

        /*
        Shows the department specific statistics. This is specific to the review of type rname
         */
        var dept, dept_count, dept_percent, groupedByDept, groupedByStatus, groupedByYearAndRname, len3, len4, m, n, num_local_by_dept, num_local_users, ref2, stage, stages;
        $scope.percent_dept = {};
        num_local_users = $scope._getLocalUserCount();
        num_local_by_dept = $scope._getLocalUserCountByDept();
        if ($scope.review.type === "self-review") {
          groupedByYearAndRname = _.groupBy($scope.data['self-reviews'], function(review) {
            return review.year + "-" + review.rname;
          });
        } else {
          groupedByYearAndRname = _.groupBy($scope.data.latest_reviews, function(review) {
            return review.year + "-" + review.rname;
          });
        }
        stages = ['SET_TEMPLATE', 'SET_REVIEWER', 'SETUP_DONE', 'REVIEW_DRAFT', 'COMMIT_REVIEW', 'PUBLISH_REVIEW', 'READY2PUBLISH', 'ACKNOWLEDGE_REVIEW'];
        groupedByDept = _.groupBy(groupedByYearAndRname[reviewKey], $scope._group_dept);
        dept_percent = {};
        dept_count = {};
        ref2 = _.uniq((function() {
          var len3, n, ref2, results;
          ref2 = $scope.users;
          results = [];
          for (n = 0, len3 = ref2.length; n < len3; n++) {
            x = ref2[n];
            results.push(x.ou);
          }
          return results;
        })());
        for (m = 0, len3 = ref2.length; m < len3; m++) {
          dept = ref2[m];
          dept_percent[dept] = {};
          dept_count[dept] = {};
          if ($scope.review.type === "review") {
            groupedByStatus = _.groupBy(groupedByDept[dept], function(review) {
              return review.reviews.change_type;
            });
          } else {
            groupedByStatus = _.groupBy(groupedByDept[dept], function(review) {
              return review.selfReviews.change_type;
            });
          }
          for (n = 0, len4 = stages.length; n < len4; n++) {
            stage = stages[n];
            if (groupedByStatus.hasOwnProperty(stage)) {
              dept_percent[dept][stage] = groupedByStatus[stage].length * 100 / num_local_by_dept[dept];
              dept_count[dept][stage] = groupedByStatus[stage].length;
            } else {
              dept_percent[dept][stage] = 0;
              dept_count[dept][stage] = 0;
            }
          }
          dept_count[dept]['UNASSIGNED'] = num_local_by_dept[dept] - $scope.sum(_.values(dept_count[dept])) + dept_count[dept]['SET_TEMPLATE'] + dept_count[dept]['SET_REVIEWER'];
          dept_percent[dept]['UNASSIGNED'] = dept_count[dept]['UNASSIGNED'] * 100 / num_local_by_dept[dept];
        }
        $scope.dept_percent = dept_percent;
        $scope.dept_count = dept_count;
      };
      $scope.sum = function(arr) {
        return _.reduce(arr, function(sum, el) {
          return sum + el;
        });
      };
      $scope.displayDetailedStats = function(review, dept, status) {

        /*
        Displays a lightbox and shows details stats of the department selected
         */
        var dialog;
        dialog = $modal.open({
          templateUrl: 'static/partials/dialog-detailed-stats.html',
          controller: 'DialogDetailedStatsCtrl',
          size: 'lg',
          windowClass: 'dialog-detailed-stats',
          resolve: {
            dept: function() {
              return dept;
            },
            status: function() {
              return status;
            },
            users: function() {
              var len3, m, ref2, u, users;
              users = [];
              ref2 = $scope.users;
              for (m = 0, len3 = ref2.length; m < len3; m++) {
                u = ref2[m];
                if (u.ou === dept) {
                  users.push(u.uid);
                }
              }
              return users;
            },
            user2dict: function() {
              return $scope.user2dept;
            },
            dept_reviews: function() {
              var groupedByDept, groupedByYearAndRname;
              console.log();
              if ($scope.review.type === "self-review") {
                groupedByYearAndRname = _.groupBy($scope.data['self-reviews'], function(review) {
                  return review.year + "-" + review.rname;
                });
              } else {
                groupedByYearAndRname = _.groupBy($scope.data.latest_reviews, function(review) {
                  return review.year + "-" + review.rname;
                });
              }
              groupedByDept = _.groupBy(groupedByYearAndRname[$scope.selectedReview], $scope._group_dept);
              return groupedByDept[dept];
            },
            review_rname: function() {
              return $scope._selected_review_type.rname;
            },
            review_year: function() {
              return $scope._selected_review_type.year;
            },
            review_type: function() {
              return $scope.review.type;
            }
          }
        });
        dialog.result.then(function() {});
      };
      $scope.displayDetailedOverallStats = function(status) {

        /*
        Displays a lightbox and shows details stats of the department selected
         */
        var dialog;
        dialog = $modal.open({
          templateUrl: 'static/partials/dialog-detailed-stats.html',
          controller: 'DialogDetailedStatsCtrl',
          size: 'lg',
          windowClass: 'dialog-detailed-stats',
          resolve: {
            dept: function() {
              return "Overall";
            },
            status: function() {
              return status;
            },
            users: function() {
              var len3, m, ref2, u, users;
              users = [];
              ref2 = $scope.users;
              for (m = 0, len3 = ref2.length; m < len3; m++) {
                u = ref2[m];
                users.push(u.uid);
              }
              return users;
            },
            user2dict: function() {
              return $scope.user2dept;
            },
            dept_reviews: function() {
              var groupedByYearAndRname;
              console.log();
              if ($scope.review.type === "self-review") {
                groupedByYearAndRname = _.groupBy($scope.data['self-reviews'], function(review) {
                  return review.year + "-" + review.rname;
                });
              } else {
                groupedByYearAndRname = _.groupBy($scope.data.latest_reviews, function(review) {
                  return review.year + "-" + review.rname;
                });
              }
              return groupedByYearAndRname[$scope.selectedReview];
            },
            review_rname: function() {
              return $scope._selected_review_type.rname;
            },
            review_year: function() {
              return $scope._selected_review_type.year;
            },
            review_type: function() {
              return $scope.review.type;
            }
          }
        });
        dialog.result.then(function() {});
      };
      $scope.displayDetailedBacklogStats = function(year, review, user) {

        /*
        Displays a lightbox and shows details stats of the user backlog
         */
        var dialog;
        dialog = $modal.open({
          templateUrl: 'static/partials/dialog-detailed-stats.html',
          controller: 'DialogBacklogDetailedStatsCtrl',
          size: 'lg',
          windowClass: 'dialog-detailed-backlog-stats',
          resolve: {
            user: function() {
              return user;
            },
            user2dict: function() {
              return $scope.user2dept;
            },
            users_in_backlog: function() {
              var len3, m, r, ref2, ref3, user_reviews;
              user_reviews = [];
              ref2 = $scope.data.latest_reviews;
              for (m = 0, len3 = ref2.length; m < len3; m++) {
                r = ref2[m];
                if (r.rname === review && (r.year = year && r.reviews.all_reviewers.indexOf(user) !== -1 && ((ref3 = r.reviews.change_type) === 'SETUP_DONE' || ref3 === 'REVIEW_DRAFT' || ref3 === 'COMMIT_REVIEW' || ref3 === 'READY2PUBLISH'))) {
                  user_reviews.push(r.uid);
                }
              }
              return user_reviews;
            },
            review_rname: function() {
              return $scope._selected_review_type.rname;
            },
            review_year: function() {
              return $scope._selected_review_type.year;
            }
          }
        });
        dialog.result.then(function() {});
      };
      $scope.archiveReview = function(review) {
        WS.archiveReview(review.year, review.rname);
      };
      $scope.unarchiveReview = function(review) {
        WS.unarchiveReview(review.year, review.rname);
      };
      $scope.showOverallStats = function(reviewKey) {

        /*
        Setup the progress bars on the individual reviews (on the left side)
         */
        var assignedReviews, category, countReviews, groupedByStatus, groupedByYearAndRname, l, len3, len4, len5, m, n, num_assigned_users, num_local_by_dept, num_local_users, o, stages, totalReviews;
        $scope.selectedReview = $scope._selected_review_type.year + "-" + $scope._selected_review_type.rname;
        if ($scope.review.type === "self-review") {
          groupedByYearAndRname = _.groupBy($scope.data['self-reviews'], function(review) {
            return review.year + "-" + review.rname;
          });
        } else {
          groupedByYearAndRname = _.groupBy($scope.data.latest_reviews, function(review) {
            return review.year + "-" + review.rname;
          });
        }
        $scope.percentage = {};
        $scope.overall_count = {};
        num_local_users = $scope._getLocalUserCount();
        num_local_by_dept = $scope._getLocalUserCountByDept();
        $scope.depts = Object.keys(num_local_by_dept);
        $scope.percentage[reviewKey] = {};
        $scope.overall_count[reviewKey] = {};
        assignedReviews = 0;
        countReviews = {};
        totalReviews = 0;
        if ($scope.review.type === "self-review") {
          groupedByStatus = _.groupBy(groupedByYearAndRname[reviewKey], function(review) {
            return review.selfReviews.change_type;
          });
        } else {
          groupedByStatus = _.groupBy(groupedByYearAndRname[reviewKey], function(review) {
            return review.reviews.change_type;
          });
        }
        stages = ['SET_TEMPLATE', 'SET_REVIEWER', 'SETUP_DONE', 'REVIEW_DRAFT', 'COMMIT_REVIEW', 'READY2PUBLISH', 'PUBLISH_REVIEW', 'ACKNOWLEDGE_REVIEW'];
        for (m = 0, len3 = stages.length; m < len3; m++) {
          category = stages[m];
          if (groupedByStatus.hasOwnProperty(category)) {
            l = groupedByStatus[category].length;
            totalReviews += l;
          }
        }
        for (n = 0, len4 = stages.length; n < len4; n++) {
          category = stages[n];
          if (groupedByStatus.hasOwnProperty(category)) {
            l = groupedByStatus[category].length;
            $scope.overall_count[reviewKey][category] = l;
          } else {
            $scope.overall_count[reviewKey][category] = 0;
          }
        }
        num_assigned_users = totalReviews - $scope.overall_count[reviewKey]['SET_TEMPLATE'] - $scope.overall_count[reviewKey]['SET_REVIEWER'];
        for (o = 0, len5 = stages.length; o < len5; o++) {
          category = stages[o];
          if (groupedByStatus.hasOwnProperty(category)) {
            l = groupedByStatus[category].length;
            $scope.percentage[reviewKey][category] = l * 100 / num_assigned_users;
          } else {
            $scope.percentage[reviewKey][category] = 0;
          }
        }
        $scope.overall_count[reviewKey]["UNASSIGNED"] = num_local_users - totalReviews + $scope.overall_count[reviewKey]['SET_TEMPLATE'] + $scope.overall_count[reviewKey]['SET_REVIEWER'];
        $scope.percentage[reviewKey]["UNASSIGNED"] = $scope.overall_count[reviewKey]["UNASSIGNED"] * 100 / num_local_users;
      };
      if ($scope.data.active_review_types.length > 0) {
        $scope._sortByKey($scope.data.active_review_types, 'year');
        $scope.displayStats($scope.data.active_review_types[0]);
      }
      $scope.$watch(function() {
        return $scope._selected_review_type;
      }, function(newval, oldval) {
        if (newval) {
          $scope.showOverallStats(newval.year + "-" + newval.rname);
          return $scope.showDepartmentStats(newval.year + "-" + newval.rname);
        }
      });
    }
  ]);

}).call(this);
