// Generated by CoffeeScript 1.10.0
(function() {
  angular.module("perform").controller("SetupReviewsCtrl", [
    "$scope", "$state", "$stateParams", "WS", "Utils", "allUsers", "allTemplates", "allReviews", "$filter", "PagerService", "Auth", function($scope, $state, $stateParams, WS, Utils, allUsers, allTemplates, allReviews, $filter, PagerService, Auth) {
      var j, len, opt, ref, temp, user;
      $scope.allUsers = allUsers;
      $scope.usersObj = {};
      $scope.users = [];
      $scope.fullnames = [];
      $scope.cnToUidMap = {};
      $scope.uidToCnMap = {};
      $scope.fullnameToUidMap = {};
      $scope.permitted_users = [];
      $scope.copiedText = '';
      $scope.copyForm = '';
      $scope.isCopied = false;
      $scope.reviewer = '';
      $scope.selectAllKeys = {
        17: false,
        65: false
      };
      $scope.selectRightKeys = {
        16: false,
        39: false
      };
      $scope.selectLeftKeys = {
        16: false,
        37: false
      };
      $scope.copyKeys = {
        17: false,
        67: false
      };
      $scope.randomSelectKeys = {
        17: false,
        1: false
      };
      $scope.isMultipleSelected = false;
      $scope.isLeftMultipleSelected = false;
      $scope.singleCopied = false;
      $scope.multipleReviewers = [];
      $scope.currentIndex = -1;
      $scope.index = 0;
      $scope.leftCount = 0;
      $scope.copyFirst = true;
      $scope.currentCopyActiveUser = '';
      $scope.baseIndex = -1;
      $scope.review_year = $stateParams.review_year;
      $scope.review_name = $stateParams.review_name;
      $scope.reviewKey = $stateParams.review_year + "-" + $stateParams.review_name;
      $scope.review_metadata = allReviews.metadata || {};
      user = Auth.getUser();
      $scope.allUsersByLocation = [];
      $scope.global_permitted_users = [];
      $scope.sortBy = 'ou';
      $scope.sortByText = {
        cn: 'Name',
        ou: 'Department',
        physicalDeliveryOfficeName: 'Location'
      };
      $scope.sortOrderIcon = {
        "true": 'glyphicon-chevron-down',
        "false": 'glyphicon-chevron-up'
      };
      $scope.sortOrder = true;
      $scope.sortColumn = function(completeUserList, key) {
        if ($scope.sortBy === key) {
          $scope.sortOrder = !$scope.sortOrder;
        } else {
          $scope.sortBy = key;
          $scope.sortOrder = false;
        }
        return $filter('orderBy')(completeUserList, key, $scope.sortOrder);
      };
      $scope.filterUsers = function(people, key) {
        var userslist;
        userslist = [];
        if (!_.isEmpty(key)) {
          _.filter(people, function(record) {
            var i, j, len, values;
            values = _.values(record);
            for (j = 0, len = values.length; j < len; j++) {
              i = values[j];
              if (typeof i !== "object" && !(_.isEmpty(i)) && typeof i !== "boolean") {
                if ((i.toLowerCase()).search(key.toLowerCase()) !== -1) {
                  userslist.push(record);
                  break;
                }
              }
            }
            return userslist;
          });
        } else {
          userslist = people;
        }
        return userslist;
      };
      $scope.setPage = function(people, page) {
        var i, j, len, ref, ref1;
        $scope.dummyItems = [];
        for (j = 0, len = people.length; j < len; j++) {
          i = people[j];
          $scope.dummyItems.push(i);
        }
        $scope.currentPage = page;
        if (page < 1 || (page > (ref = (ref1 = $scope.pagingDetails) != null ? ref1.totalPages : void 0) && ref !== 0)) {
          return $scope.users;
        }
        $scope.pagingDetails = PagerService.GetPager(people.length, page, 100);
        $scope.users = $scope.dummyItems.slice($scope.pagingDetails.startIndex, $scope.pagingDetails.endIndex + 1);
        return $scope.users;
      };
      $scope.init = function() {
        var j, k, len, len1, ref, ref1, ref2, ref3, ref4, ref5, review, x;
        ref = $scope.allUsers;
        for (j = 0, len = ref.length; j < len; j++) {
          x = ref[j];
          if (x.active) {
            if (Auth.getUser().uid === x.uid) {
              if (Auth.getUser().permissions.indexOf('EDIT_HR') === -1) {
                continue;
              }
            }
            $scope.users.push({
              site_key: x.site_key,
              ou: x.ou,
              cn: x.cn,
              uid: x.uid
            });
            $scope.cnToUidMap[x.cn] = x.uid;
            $scope.uidToCnMap[x.uid] = x.cn;
            $scope.fullnameToUidMap[x.cn.concat(' (', x.uid, ')')] = x.uid;
            $scope.usersObj[x.uid] = x;
            $scope.fullnames.push(x.cn.concat(' (', x.uid, ')'));
            if ((ref1 = $scope.usersObj[x.uid]) != null) {
              ref1.template_id = "";
            }
            if ((ref2 = $scope.usersObj[x.uid]) != null) {
              ref2.permitted_users = [];
            }
            if ((ref3 = $scope.usersObj[x.uid]) != null) {
              ref3.locked = false;
            }
            if ((ref4 = $scope.usersObj[x.uid]) != null) {
              ref4.committed = false;
            }
          }
          if (x.uid==='mhead' && x.active && x.location.id.indexOf('china-offsite') === -1) {
            if (x.organization === 'DreamWorks Animation L.L.C.' || x.organization === 'Universal City Studios Productions LLLP') {
                console.log(x.organization);
                console.log(user); }
          }
          //if (x.active && x.organization === user.organization && x.location.id.indexOf('china-offsite') === -1) {
          if (x.active && (x.organization === 'DreamWorks Animation L.L.C.' || x.organization === 'Universal City Studios Productions LLLP') && x.location.id.indexOf('china-offsite') === -1) {
            $scope.allUsersByLocation.push(x);
          }
        }
        if (allReviews.reviews.length) {
          ref5 = allReviews.reviews;
          for (k = 0, len1 = ref5.length; k < len1; k++) {
            review = ref5[k];
            if ($scope.reviewKey === (review.year + "-" + review.rname)) {
              user = _.find($scope.allUsers, {
                "uid": review.uid
              });
              if (user) {
                user.permitted_users = review.permitted_users;
                user.template_id = review.template_id;
                user.locked = review.locked;
                user.committed = review.committed;
              }
            }
          }
        }
        $scope.filteredText = $stateParams.filter;
        $scope.filtered_users_results = $scope.sortColumn($scope.allUsersByLocation, 'ou');
        $scope.users = $scope.setPage($scope.filtered_users_results, 1);
        if (angular.isUndefined($scope.filteredText)) {
          return $scope.filteredText = "";
        }
      };
      $scope.init();
      $scope.reviewSetupHandler = function(searchkey, sortkey, pageIndex) {
        $scope.filtered_users_results = $scope.sortColumn($scope.filterUsers($scope.allUsersByLocation, searchkey), sortkey);
        $scope.users = $scope.setPage($scope.filtered_users_results, pageIndex);
        if (!$scope.$$phase) {
          return $scope.$apply($scope.users);
        }
      };
      $scope.save = {
        status: ''
      };
      $scope.setSaveStatus = function(token) {
        if (token == null) {
          token = "";
        }
        if (token === 'saving') {
          return $scope.save.status = "Saving ..";
        } else if (token === true) {
          return $scope.save.status = "Saved";
        } else if (token === false) {
          return $scope.save.status = "Error";
        } else {
          return $scope.save.status = "";
        }
      };
      $scope.getTooltip = function(user) {
        if (user.committed) {
          return "Review is completed. Locked for further changes.";
        } else if (user.locked) {
          return "Review is delivered. Locked for further changes.";
        } else {
          return "";
        }
      };
      $scope.setFocus = function(elem) {
        $(elem.target).find('input[type="text"]').focus();
        return '';
      };
      $scope.templates = [];
      opt = {
        year: "",
        id: ""
      };
      ref = _.keys(allTemplates);
      for (j = 0, len = ref.length; j < len; j++) {
        temp = ref[j];
        opt.year = temp.split('/')[0];
        opt.id = temp.split('/')[1];
        $scope.templates.push(angular.copy(opt));
      }
      $scope.setupReview = function(data) {
        $scope.setSaveStatus('saving');
        return WS.setupReview($scope.review_year, $scope.review_name, data).then(function(response) {
          return $scope.setSaveStatus(response.retVal);
        });
      };
      if ($stateParams.desc) {
        $scope.review_metadata.desc = $stateParams != null ? $stateParams.desc : void 0;
        $scope.setupReview($scope.review_metadata);
      }
      $scope.setTemplateID = function(user) {
        $scope.setSaveStatus('saving');
        return WS.setTemplateID(user.uid, $scope.review_year, $scope.review_name, user.template_id).then(function(response) {
          return $scope.setSaveStatus(response.retVal);
        });
      };
      $scope.setPermissions = function(user, reviewer) {
        if (_.isEmpty(reviewer)) {
          reviewer = user.reviewer;
        }
        $scope.setSaveStatus('saving');
        if (!user.committed && !user.locked) {
          user.permitted_users = (!(user.permitted_users != null) ? [] : user.permitted_users);
          if (user.permitted_users.indexOf($scope.cnToUidMap[$scope._getCnFromFullname(reviewer)]) === -1) {
            user.permitted_users.push($scope.cnToUidMap[$scope._getCnFromFullname(reviewer)]);
          }
          user.reviewer = "";
          $scope.globalReviewer = "";
          $scope.leftCount = 0;
          return WS.setPermissions(user.uid, $scope.review_year, $scope.review_name, user.template_id, user.permitted_users).then(function(response) {
            return $scope.setSaveStatus(response.retVal);
          });
        }
      };
      $scope.setGlobalPermissions = function(globalReviewer) {
        var k, len1, ref1;
        ref1 = $scope.users;
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          user = ref1[k];
          $scope.setPermissions(user, globalReviewer);
        }
        return $scope.global_permitted_users.push(globalReviewer);
      };
      $scope._getCnFromFullname = function(fullname) {
        return fullname.split(' (')[0];
      };
      $scope.clickFunction = function(event, reviewer, user, index) {
        if (!user.committed && !user.locked) {
          if (typeof $scope.multipleReviewers !== 'undefined') {
            $scope.multipleReviewers = [];
          }
          $scope.baseIndex = user.permitted_users.indexOf(reviewer);
          if ($scope.randomSelectKeys[17] === false) {
            if ($scope.multipleReviewers.indexOf(reviewer) === -1) {
              $scope.multipleReviewers = [];
            }
          }
          if (user !== $scope.currentCopyActiveUser) {
            $scope.multipleReviewers = [];
            $scope.currentCopyActiveUser = user;
          }
          if (event.which === 1) {
            $scope.randomSelectKeys[1] = true;
          }
          if ($scope.multipleReviewers.indexOf(reviewer) !== -1) {
            $scope.multipleReviewers.splice($scope.multipleReviewers.indexOf($scope.multipleReviewers.indexOf(reviewer)), 1);
          } else {
            $scope.multipleReviewers.push(reviewer);
          }
          if ($scope.randomSelectKeys[17] === true && $scope.randomSelectKeys[1] === true) {
            $scope.randomSelectKeys[1] = false;
            console.log(reviewer + " user: " + user);
            $scope.isMultipleSelected = true;
            $scope.copyFirst = false;
            $scope.copyFrom = user;
          }
        }
        return $scope._highlightSelectedReviewers(user);
      };
      $scope._highlightSelectedReviewers = function(user) {
        var k, len1, ref1, reviewer;
        console.log($scope.multipleReviewers);
        if (!angular.isUndefined($scope.multipleReviewers)) {
          angular.element('.reviewer-tag').removeClass('selected-tag');
          ref1 = $scope.multipleReviewers;
          for (k = 0, len1 = ref1.length; k < len1; k++) {
            reviewer = ref1[k];
            angular.element(document.querySelector('#rev-' + user.uid + '-' + reviewer)).addClass('selected-tag');
          }
        }
        return '';
      };
      $scope.pasteFunction = function(user) {
        var index, k, len1, length, ref1, reviewer;
        if ($scope.isCopied) {
          if ($scope.isLeftMultipleSelected) {
            console.log('leftmultipleselected' + user.uid + " " + $scope.multipleReviewers);
            length = $scope.multipleReviewers.length;
            index = length - 1;
            while (index > -1) {
              if ($scope.multipleReviewers[index] !== user.uid) {
                user.reviewer = $scope.uidToCnMap[$scope.multipleReviewers[index]];
                $scope.setPermissions(user);
              }
              index--;
            }
          } else if ($scope.isMultipleSelected) {
            console.log('multipleselected' + user.uid + " " + $scope.multipleReviewers);
            ref1 = $scope.multipleReviewers;
            for (k = 0, len1 = ref1.length; k < len1; k++) {
              reviewer = ref1[k];
              if (reviewer !== user.uid) {
                user.reviewer = $scope.uidToCnMap[reviewer];
                $scope.setPermissions(user);
              }
            }
          } else if ($scope.singleCopied) {
            console.log('singlecopied' + user.uid + " " + $scope.multipleReviewers);
            if ($scope.cnToUidMap[$scope.copiedText] !== user.uid) {
              user.reviewer = $scope.copiedText;
              $scope.setPermissions(user);
            }
          }
        }
        return '';
      };
      $scope.multipleSelectFunction = function(event, reviewer, user) {
        console.log("Start of function: " + $scope.multipleReviewers);
        event.preventDefault();
        if (event.ctrlKey) {
          $scope.randomSelectKeys[17] = true;
        }
        if ($scope.copyFrom !== user) {
          $scope.index = 0;
          $scope.leftCount = 0;
        }
        if (event.which === 17 || event.which === 1) {
          $scope.randomSelectKeys[event.which] = true;
        }
        if (event.keyCode === 17 || event.keyCode === 65) {
          $scope.selectAllKeys[event.keyCode] = true;
        }
        if (event.keyCode === 16 || event.keyCode === 37) {
          $scope.selectLeftKeys[event.keyCode] = true;
        }
        if (event.keyCode === 16 || event.keyCode === 39) {
          $scope.selectRightKeys[event.keyCode] = true;
        }
        if (event.keyCode === 17 || event.keyCode === 67) {
          $scope.copyKeys[event.keyCode] = true;
        }
        if ($scope.copyKeys[17] === true && $scope.copyKeys[67] === true) {
          $scope.copyKeys[17] = false;
          $scope.copyKeys[67] = false;
          $scope.randomSelectKeys[17] = false;
          $scope.copiedText = $scope.uidToCnMap[reviewer];
          $scope.currentIndex = user.permitted_users.indexOf(reviewer);
          $scope.copyFrom = user;
          $scope.isCopied = true;
          if (!$scope.copyFirst) {
            $scope.singleCopied = false;
            $scope.copyFirst = true;
          } else {
            $scope.singleCopied = true;
            $scope.isMultipleSelected = false;
            $scope.isLeftMultipleSelected = false;
          }
        }
        if ($scope.selectAllKeys[17] === true && $scope.selectAllKeys[65] === true) {
          $scope.randomSelectKeys[17] = false;
          $scope.selectAllKeys[17] = false;
          $scope.selectAllKeys[65] = false;
          $scope.isMultipleSelected = true;
          $scope.singleCopied = false;
          $scope.isLeftMultipleSelected = false;
          $scope.multipleReviewers = user.permitted_users;
          $scope.copyFrom = user;
          $scope.copyFirst = false;
          console.log("Ctrl + A: " + $scope.multipleReviewers);
        }
        if ($scope.selectRightKeys[16] === true && $scope.selectRightKeys[39] === true) {
          $scope.randomSelectKeys[17] = false;
          $scope.selectRightKeys[39] = false;
          if ($scope.index === -1) {
            $scope.index = $scope.baseIndex(+1);
          }
          if (user.permitted_users.length > $scope.index) {
            if ($scope.multipleReviewers.length === 0) {
              $scope.multipleReviewers.push(reviewer);
            }
            $scope.multipleReviewers.push(user.permitted_users[$scope.index]);
            $scope.isMultipleSelected = true;
            $scope.singleCopied = false;
            $scope.isLeftMultipleSelected = false;
            $scope.copyFrom = user;
            $scope.copyFirst = false;
            $scope.index++;
            console.log("Ctrl + Right: " + $scope.multipleReviewers);
          }
        }
        if ($scope.selectLeftKeys[16] === true && $scope.selectLeftKeys[37] === true) {
          $scope.randomSelectKeys[17] = false;
          if ($scope.leftCount === 0) {
            $scope.multipleReviewers = [];
            $scope.index = 0;
          }
          $scope.selectLeftKeys[37] = false;
          $scope.leftCount++;
          $scope.currentIndex = user.permitted_users.indexOf(reviewer);
          if ($scope.index === 0) {
            $scope.index = $scope.currentIndex;
          }
          $scope.multipleReviewers.push(user.permitted_users[$scope.index]);
          $scope.isLeftMultipleSelected = true;
          $scope.singleCopied = false;
          $scope.isMultipleSelected = false;
          $scope.copyFrom = user;
          $scope.copyFirst = false;
          $scope.index--;
          console.log("Ctrl + Left: " + $scope.multipleReviewers);
        }
        $scope._highlightSelectedReviewers($scope.copyFrom);
        console.log("End of function: " + $scope.multipleReviewers);
        return '';
      };
      $scope.combined = function(template) {
        return template.year.concat("/" + template.id);
      };
      $scope.setGlobalTemplateID = function(templateID) {
        var k, len1, ref1, results;
        ref1 = $scope.users;
        results = [];
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          user = ref1[k];
          if (!user.committed && !user.locked) {
            user.template_id = templateID;
            results.push($scope.setTemplateID(user));
          } else {
            results.push(void 0);
          }
        }
        return results;
      };
      $scope.removeGlobalReviewer = function(reviewer) {
        var k, len1, ref1;
        ref1 = $scope.users;
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          user = ref1[k];
          $scope.removeReviewer(user, reviewer);
        }
        return $scope.global_permitted_users.splice($scope.global_permitted_users.indexOf(reviewer), 1);
      };
      $scope.removeReviewer = function(user, reviewer) {
        if (!user.committed && !user.locked) {
          user.permitted_users.splice(user.permitted_users.indexOf(reviewer), 1);
          return WS.setPermissions(user.uid, $scope.review_year, $scope.review_name, user.template_id, user.permitted_users).then(function(response) {
            return $scope.setSaveStatus(response.retVal);
          });
        }
      };
    }
  ]);

}).call(this);
