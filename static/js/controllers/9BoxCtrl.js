// Generated by CoffeeScript 1.9.1
var hasProp = {}.hasOwnProperty;

angular.module("perform").controller("9BoxCtrl", [
  "$scope", "$rootScope", "$stateParams", "Reviews", "BG", "Utils", "WS", "userinfo", "users", "$state", "$interval", "NineBox", "Cache", "reviews", "selfReviews", "template", function($scope, $rootScope, $stateParams, Reviews, BG, Utils, WS, userinfo, users, $state, $interval, NineBox, Cache, reviews, selfReviews, template) {
    var freq, noOfUsers, resetKillSwitch, review, sameTemplate, templates, x;
    templates = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = reviews.length; i < len; i++) {
        review = reviews[i];
        results.push(review != null ? review.latest_template : void 0);
      }
      return results;
    })();
    $scope.review_year = $stateParams.review_year;
    $scope.review_name = $stateParams.review_name;
    $scope.review_type = $state.current.data.review_type;
    $scope.template = template;
    $scope.template_id = $scope.template.template_id;
    sameTemplate = templates.every(function(t) {
      return t.template_id === templates[0].template_id;
    });
    if (!sameTemplate) {
      console.log('Not same template. Error (404)');
      $state.go('404');
    }
    $scope.reviews = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = reviews.length; i < len; i++) {
        x = reviews[i];
        results.push(Reviews.getset(x.latest_review, $scope.review_type));
      }
      return results;
    })();
    $scope.selfReviews = selfReviews;
    $scope.users = users;
    $scope.sectionName = $stateParams.section;
    $scope.enableAutoUpdate = function() {
      return Reviews.autoUpdate();
    };
    $scope.$on('$destroy', function() {
      var ref, uid;
      ref = $scope.reviews;
      for (uid in ref) {
        if (!hasProp.call(ref, uid)) continue;
        review = ref[uid];
        Reviews.remove(review, $scope.review_type);
      }
      return Reviews.stopAutoUpdate();
    });
    noOfUsers = $scope.users.length;
    if (noOfUsers < 30) {
      freq = null;
    } else {
      freq = 6;
    }
    Reviews.autoUpdate(resetKillSwitch = true, freq = freq);
    $scope.setupAndPreview = function(template) {
      'copy/pasted from js/controllers/SetupTemplatesCtrl.coffee';
      if (template['weights-performance'].error || template['weights-potential'].error) {
        return WS.setTemplateWeights(template.id, $scope.review_year, $scope.review_name).then((function(_this) {
          return function(response) {
            return $state.go('admin.templates.preview_template.render', {
              review_year: $scope.review_year,
              review_name: $scope.review_name,
              template_id: template.template_id
            });
          };
        })(this));
      } else {
        return $state.go('admin.templates.preview_template.render', {
          review_year: $scope.review_year,
          review_name: $scope.review_name,
          template_id: template.template_id
        });
      }
    };
  }
]);
