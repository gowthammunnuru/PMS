// Generated by CoffeeScript 1.10.0
(function() {
  angular.module("perform").controller("HomeCtrl", [
    "$scope", "$rootScope", "$stateParams", "$state", "WS", "BG", "Cache", "Auth", "Utils", "Reviews", "userinfo", "$modal", "$location", function($scope, $rootScope, $stateParams, $state, WS, BG, Cache, Auth, Utils, Reviews, userinfo, $modal, $location) {
      var i, index, index2, indexToSplice, j, len, len1, ref, review, reviews;
      $scope.userinfo = userinfo;
      $scope.showStatistics = false;
      $scope.isFilter = false;
      $scope.percentage = {};
      $scope.statusCount = {};
      $scope.filteredReviews = {
        active_results: {},
        archived_results: {}
      };
      $scope.init = function() {
        if ($state.current.url !== $location.url()) {
          return $location.url($state.current.url);
        }
      };
      $scope.init();
      $scope.userinfo.editable.unlocked = [$scope.userinfo.editable.unlocked['self-review'], $scope.userinfo.editable.unlocked['review']];
      $scope.validate = function(review) {
        if (review.change_type !== 'SET_TEMPLATE' && review.change_type !== 'SET_REVIEWER') {
          return true;
        } else {
          return false;
        }
      };
      ref = $scope.userinfo.editable.unlocked;
      for (i = 0, len = ref.length; i < len; i++) {
        reviews = ref[i];
        index = $scope.userinfo.editable.unlocked.indexOf(reviews);
        indexToSplice = [];
        for (j = 0, len1 = reviews.length; j < len1; j++) {
          review = reviews[j];
          if (!$scope.validate(review)) {
            indexToSplice.push($scope.userinfo.editable.unlocked[index].indexOf(review));
          }
        }
        index2 = indexToSplice.length - 1;
        while (index2 >= 0) {
          $scope.userinfo.editable.unlocked[index].splice(indexToSplice[index2], 1);
          index2--;
        }
      }
      $scope._getUsersCount = function() {
        return $scope.userinfo.editable.unlocked[1].length;
      };
      $scope._getCategoryCount = function(category) {
        var count, k, len2, ref1;
        count = 0;
        ref1 = $scope.userinfo.editable.unlocked[1];
        for (k = 0, len2 = ref1.length; k < len2; k++) {
          review = ref1[k];
          if (review.change_type === category) {
            count += 1;
          }
        }
        return count;
      };
      $scope.calculateStatistics = function() {
        var category, k, len2, num_total_users, results, stages;
        stages = ['READY2PUBLISH', 'COMMIT_REVIEW', 'REVIEW_DRAFT', 'SETUP_DONE'];
        num_total_users = $scope._getUsersCount();
        $scope.percentage = {};
        $scope.statusCount = {};
        results = [];
        for (k = 0, len2 = stages.length; k < len2; k++) {
          category = stages[k];
          $scope.statusCount[category] = $scope._getCategoryCount(category);
          results.push($scope.percentage[category] = ($scope.statusCount[category] * 100) / num_total_users);
        }
        return results;
      };
      $scope.calculateStatistics();
      $scope.displayStats = function(status) {

        /*
        Displays a lightbox and shows detailed of task list
         */
        var dialog;
        dialog = $modal.open({
          templateUrl: 'static/partials/dialog-user-stats.html',
          controller: 'DialogUserStatsCtrl',
          size: 'lg',
          windowClass: 'dialog-user-stats',
          resolve: {
            users: function() {
              var k, len2, ref1, user, users;
              users = [];
              ref1 = $scope.userinfo.editable.unlocked[1];
              for (k = 0, len2 = ref1.length; k < len2; k++) {
                user = ref1[k];
                if (user.change_type === status) {
                  users.push(user);
                }
              }
              return users;
            },
            loggedUser: function() {
              return Auth.getUser().cn;
            },
            status: function() {
              return status;
            }
          }
        });
        dialog.result.then(function() {});
      };
      $scope.tabs = ["pending", "archived"];
      $scope.tabIndex = 0;
      $scope.localtime = Utils.localtime;
      $scope.len = function(obj) {
        var items, x, y;
        items = [];
        for (x in obj) {
          y = obj[x];
          items = items.concat(y);
        }
        return items.length;
      };
      $scope.goToPublishedReview = function(uid, year, rname) {
        return Cache.getReviewByUser(uid, year, rname, 'review').then((function(_this) {
          return function(response) {
            var dialog;
            if (response.latest_review.acknowledged) {
              return $state.go('user_review_year.start', {
                uid: Auth.getUser().uid,
                review_year: year,
                review_name: rname
              });
            } else {
              dialog = $modal.open({
                templateUrl: 'static/partials/dialog-acknowledge-review.html',
                controller: 'DialogAcknowledgeCtrl',
                size: 'lg',
                windowClass: 'dialog-acknowledge-review'
              });
              return dialog.result.then(function() {
                WS.acknowledgeReview(uid, year, rname, 'review', response.latest_review.template_id).then(function(response) {
                  console.log('Going to review ..');
                  return $state.go('user_review_year.start', {
                    uid: Auth.getUser().uid,
                    review_year: year,
                    review_name: rname
                  });
                });
              });
            }
          };
        })(this));
      };
      $scope.selected = [];
      $scope.goToReview = function(review) {
        var state;
        if ($scope.selected.length > 1) {
          $scope.goToMultiReview($scope.selected);
          return;
        }
        if (review.review_type === 'self-review') {
          state = 'user_self_review_year.start';
        } else {
          state = 'user_review_year.start';
        }
        return $state.go(state, {
          uid: review.uid,
          review_year: review.year,
          review_name: review.rname
        });
      };
      $scope.confirmMultiReview = function(reviews) {
        var dialog;
        return dialog = $modal.open({
          templateUrl: 'static/partials/dialog-confirm-multireview.html',
          controller: 'DialogMultiReviewConfirmCtrl',
          size: 'lg',
          windowClass: "dialog-multireview-wrapper",
          resolve: {
            reviews: function() {
              return reviews;
            }
          }
        });
      };
      $scope.goToMultiReview = function(reviews) {
        var grouped, uids, x;
        grouped = _.groupBy(reviews, function(x) {
          return x.year + "-" + x.rname + "-" + x.review_type + "-" + x.template_id;
        });
        if (_.keys(grouped).length > 1) {
          $scope.confirmMultiReview(reviews);
          return;
        }
        uids = (function() {
          var k, len2, results;
          results = [];
          for (k = 0, len2 = reviews.length; k < len2; k++) {
            x = reviews[k];
            results.push(x.uid);
          }
          return results;
        })();
        return $state.go('multi_user_review_year.start', {
          uids: uids.join('+'),
          review_year: reviews[0].year,
          review_name: reviews[0].rname
        });
      };
      $scope.selectAll = function(toggle) {
        var k, l, len2, len3, ref1, ref2, results;
        if (!toggle) {
          $scope.selected = [];
        }
        ref1 = $scope.filteredReviews.active_results[1];
        for (k = 0, len2 = ref1.length; k < len2; k++) {
          review = ref1[k];
          review.selected = toggle;
          if (toggle) {
            $scope.selected.push(review);
          }
        }
        if ($scope.showArchived) {
          ref2 = $scope.filteredReviews.archived_results[0];
          results = [];
          for (l = 0, len3 = ref2.length; l < len3; l++) {
            review = ref2[l];
            review.selected = toggle;
            if (toggle) {
              results.push($scope.selected.push(review));
            } else {
              results.push(void 0);
            }
          }
          return results;
        }
      };
      $scope.selectReview = function(tabIndex, itemIndex, review, bypass) {
        if (bypass == null) {
          bypass = false;
        }
        if (!bypass) {
          review.selected = !review.selected;
        }
        if (review.selected) {
          return $scope.selected.push(review);
        } else {
          return $scope.selected.splice($scope.selected.indexOf(review), 1);
        }
      };
      $scope.getCompletedPercentage = function(review, quantize) {
        if (quantize == null) {
          quantize = false;
        }
        if (quantize) {
          return Math.floor((review.curr_modelkeys * 10 / review.all_modelkeys).toFixed());
        } else {
          return (review.curr_modelkeys * 100 / review.all_modelkeys).toFixed();
        }
      };
      $scope.leaveFeedback = function() {
        var dialog;
        Utils.showLoading();
        return dialog = $modal.open({
          templateUrl: 'static/partials/dialog-leave-feedback.html',
          controller: 'DialogLeaveFeedbackCtrl',
          size: 'lg',
          windowClass: "dialog-leave-feedback-wrapper",
          resolve: {
            allUsers: function(Cache) {
              return Cache.getAllUsers().then(function(response) {
                return response;
              });
            }
          }
        });
      };
    }
  ]);

}).call(this);
