// Generated by CoffeeScript 1.10.0
(function() {
  angular.module("perform").controller("UserReviewCtrl", [
    "$scope", "$stateParams", "$rootScope", "$sanitize", "Reviews", "WS", "Portal", "Utils", "user", "$state", "$timeout", "Cache", "review", "selfReview", "Auth", "$window", function($scope, $stateParams, $rootScope, $sanitize, Reviews, WS, Portal, Utils, user, $state, $timeout, Cache, review, selfReview, Auth, $window) {
      var currentReview, ref, resetKillSwitch, section, sectionName;
      $scope.showSelfReview = {};
      if (review != null ? review.latest_template : void 0) {
        $scope.sections = (function() {
          var ref, results;
          ref = review.latest_template.section;
          results = [];
          for (sectionName in ref) {
            section = ref[sectionName];
            results.push(section);
          }
          return results;
        })();
        $scope.template_id = review.latest_template.template_id;
      }
      $scope.review_payload = review;
      $scope.review_type = $stateParams.review_type || $state.current.data.review_type;
      console.log($scope.review_type);
      $scope.review = Reviews.getset(review.latest_review, $scope.review_type);
      $scope.selfReview = Reviews.getset(selfReview.latest_review, selfReview.latest_review.review_type);
      Reviews.autoUpdate(resetKillSwitch = true);
      $scope.getSaveStatus = function() {
        return Reviews.save;
      };
      if ($scope.review_type === 'review') {
        currentReview = Reviews.getset(review.latest_review, $scope.review_type);
        WS.getBusyReviewer(currentReview.uid, currentReview.year, currentReview.rname).then(function(response) {
          $scope.busyBtnDetails = response;
          if (!_.isEmpty(response.isCurrentlyEditedBy) && response.isCurrentlyEditedBy !== 'admin' && response.isCurrentlyEditedBy !== Auth.getUser().uid && !currentReview.committed) {
            if (!_.contains(Auth.getUser().permissions, "EDIT_REVIEWS")) {
              return $state.go('editing_in_progress', {
                isCurrentlyEditedBy: [response.isCurrentlyEditedBy]
              });
            }
          } else {
            if (!_.contains(Auth.getUser().permissions, "EDIT_REVIEWS")) {
              return WS.updateIsBusyReviewer(currentReview.uid, currentReview.year, currentReview.rname, true, Auth.getUser().uid).then(function(response) {
                $scope.busyBtnDetails = {
                  isCurrentlyEditedBy: Auth.getUser().uid,
                  rname: currentReview.rname,
                  uid: currentReview.uid,
                  year: currentReview.year
                };
                if (!$scope.$$phase) {
                  return $scope.$apply();
                }
              });
            }
          }
        });
      }
      $scope.$watch('getSaveStatus()', function(newValue, oldValue) {
        var ref, ref1, ref2;
        if (newValue) {
          if (newValue[$scope.review_type].status) {
            if ((ref = $scope.save) != null) {
              ref.status = newValue[$scope.review_type].status;
            }
          }
          if ((ref1 = $scope.save) != null) {
            ref1.freq = newValue.freq;
          }
          return (ref2 = $scope.save) != null ? ref2.last = newValue[$scope.review_type].last : void 0;
        }
      }, true);
      if ((ref = $state.$current.data) != null ? ref.section : void 0) {
        $scope.sectionName = $state.$current.data.section;
      } else {
        $scope.sectionName = $stateParams.section;
      }
      $scope.user = user;
      $scope.review_year = $stateParams.review_year;
      if (!$scope.restrictedAccess) {
        $scope.$on('$destroy', function() {
          var ref1, ref2;
          if (((ref1 = $scope.busyBtnDetails) != null ? ref1.isCurrentlyEditedBy : void 0) === ((ref2 = Auth.getUser()) != null ? ref2.uid : void 0) || (Auth.getStatus() === false)) {
            return WS.updateIsBusyReviewer(currentReview.uid, currentReview.year, currentReview.rname, false, "admin");
          }
        });
        $scope.$watch('review', function(newValue, oldValue) {
          Utils.showPreventNavigation();
          if (newValue === oldValue) {
            console.log("Comparision failed, returning ..");
            Reviews.setSaveStatus(newValue.datetime, $scope.review_type);
            Utils.hidePreventNavigation();
            return;
          }
          if (Reviews.robustReviewComparison(newValue, oldValue)) {
            console.info('The RobustComparison (R) found no changes. Returning without saving');
            return;
          }
          if ($scope.onDemandSave) {
            $timeout.cancel($scope.onDemandSave);
            Reviews.setSaveStatus('pending', $scope.review_type);
            Reviews.autoUpdate(resetKillSwitch = true);
          }
          console.log('Setting up on demand save', $sanitize(newValue));
          return $scope.onDemandSave = $timeout(function() {
            var freq, response;
            response = Reviews.saveReviews($scope.review_type);
            if (_.contains(_.keys(response), 'error')) {
              $state.go('editing_in_progress', {
                isCurrentlyEditedBy: [response.error]
              });
            }
            Utils.hidePreventNavigation();
            freq = 2;
            if ($scope.review_type === 'review') {
              return Reviews.autoUpdate(resetKillSwitch = true, freq, 'review');
            } else {
              return Reviews.autoUpdate(resetKillSwitch = true);
            }
          }, 1000 * 2);
        }, true);
      }
      $window.onunload = function(event) {
        var ref1, ref2;
        if (((ref1 = $scope.busyBtnDetails) != null ? ref1.isCurrentlyEditedBy : void 0) === ((ref2 = Auth.getUser()) != null ? ref2.uid : void 0) || (Auth.getStatus() === false)) {
          return WS.updateIsBusyReviewer(currentReview.uid, currentReview.year, currentReview.rname, false, "admin");
        }
      };
    }
  ]);

}).call(this);
