// Generated by CoffeeScript 1.10.0
(function() {
  var hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  angular.module("perform").controller("MultiUserCtrl", [
    "$scope", "$rootScope", "$stateParams", "Reviews", "BG", "Utils", "userinfo", "users", "$state", "$interval", "$timeout", "Cache", "reviews", "selfReviews", "Auth", "WS", "$q", "$window", function($scope, $rootScope, $stateParams, Reviews, BG, Utils, userinfo, users, $state, $interval, $timeout, Cache, reviews, selfReviews, Auth, WS, $q, $window) {
      var freq, i, j, len, len1, noOfUsers, ref, resetKillSwitch, review, review_list, rname, sameTemplate, section, sectionName, templates, uid, uids, year;
      $scope.busyBtnDetails = [];
      uids = $stateParams.uids.split('+');
      year = $stateParams.review_year;
      rname = $stateParams.review_name;
      review_list = [];
      for (i = 0, len = uids.length; i < len; i++) {
        uid = uids[i];
        review_list.push(uid + "-" + year + "-" + rname);
      }
      WS.checkBusyReviewerForMulti(review_list).then(function(response) {
        var j, len1, results, review;
        if (!_.isEmpty(response) && !_.contains(Auth.getUser().permissions, "EDIT_REVIEWS") && !_.contains(response, Auth.getUser().uid)) {
          console.debug(response);
          return $state.go('editing_in_progress', {
            'isCurrentlyEditedBy': response
          });
        } else {
          console.debug("You got the review sista!! :D ");
          if (!_.contains(Auth.getUser().permissions, "EDIT_REVIEWS")) {
            results = [];
            for (j = 0, len1 = review_list.length; j < len1; j++) {
              review = review_list[j];
              results.push(WS.updateIsBusyReviewer(review.split("-")[0], year, rname, true, Auth.getUser().uid).then(function(response) {
                return $scope.busyBtnDetails = Auth.getUser().uid;
              }));
            }
            return results;
          }
        }
      });
      templates = (function() {
        var j, len1, ref, results;
        results = [];
        for (j = 0, len1 = reviews.length; j < len1; j++) {
          review = reviews[j];
          results.push(review != null ? (ref = review.latest_template) != null ? ref.template_id : void 0 : void 0);
        }
        return results;
      })();
      $scope.template_id = templates[0];
      sameTemplate = templates.every(function(t) {
        return t === templates[0];
      });
      if (!sameTemplate) {
        console.log('Not same template. Error (404)');
        $state.go('404');
      }
      $scope.sections = (function() {
        var ref, results;
        ref = reviews[0].latest_template.section;
        results = [];
        for (sectionName in ref) {
          section = ref[sectionName];
          results.push(section);
        }
        return results;
      })();
      $scope.switchSection = function(section) {
        $rootScope.deferPresent = true;
        return BG.addToDefer().then(function(response) {
          return $state.go('multi_user_review_year.section', {
            'section': section.name
          });
        });
      };
      $scope.$on('$destroy', function() {
        var ref;
        ref = $scope.multi_review;
        for (uid in ref) {
          if (!hasProp.call(ref, uid)) continue;
          review = ref[uid];
          Reviews.remove(review, $scope.review_type);
        }
        return Reviews.stopAutoUpdate();
      });
      $scope.goToUser = function(user, review_year, review_name) {
        $rootScope.deferPresent = true;
        return BG.addToDefer().then(function(response) {
          return $state.go('user_review_year.start', {
            'uid': user.uid,
            'review_year': review_year,
            'review_name': review_name
          });
        });
      };
      if ((ref = $state.$current.data) != null ? ref.section : void 0) {
        $scope.sectionName = $state.$current.data.section;
      } else {
        $scope.sectionName = $stateParams.section;
      }
      $scope.removeUser = function(user) {
        $rootScope.deferPresent = true;
        return BG.addToDefer().then(function(response) {
          var x;
          uids = (function() {
            var j, len1, ref1, results;
            ref1 = $scope.users;
            results = [];
            for (j = 0, len1 = ref1.length; j < len1; j++) {
              x = ref1[j];
              results.push(x.uid);
            }
            return results;
          })();
          uids.splice(uids.indexOf(user.uid), 1);
          if (uids.length === 1) {
            return $state.go("user_review_year.start", {
              uid: uids[0],
              review_year: $stateParams.review_year,
              review_name: $stateParams.review_name
            }, {});
          } else {
            return $state.go("multi_user_review_year.section", {
              section: $scope.sectionName,
              uids: uids.join("+")
            }, {});
          }
        });
      };
      $scope.users = users;
      $scope.headerString = $scope.users[0].cn + ", " + $scope.users[1].cn;
      if ($scope.users.length > 2) {
        $scope.headerString += " and +" + ($scope.users.length - 2);
      }
      $scope.review_year = $stateParams.review_year;
      $scope.review_name = $stateParams.review_name;
      $scope.review_type = $state.current.data.review_type;
      $scope.userinfo = userinfo;
      $scope.possibleNewReviews = function() {
        var allReviews, displayed, x;
        displayed = (function() {
          var j, len1, ref1, results;
          ref1 = $scope.users;
          results = [];
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            x = ref1[j];
            results.push(x.uid);
          }
          return results;
        })();
        allReviews = (function() {
          var j, len1, ref1, results;
          ref1 = $scope.userinfo.editable.unlocked.review;
          results = [];
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            x = ref1[j];
            results.push(x);
          }
          return results;
        })();
        return (function() {
          var j, len1, ref1, results;
          results = [];
          for (j = 0, len1 = allReviews.length; j < len1; j++) {
            x = allReviews[j];
            if ((ref1 = x.uid, indexOf.call(displayed, ref1) < 0) && x.rname === $scope.review_name && x.template_id === $scope.template_id) {
              results.push(x);
            }
          }
          return results;
        })();
      };
      $scope.addReview = function(uid) {
        $rootScope.deferPresent = true;
        return BG.addToDefer().then(function(response) {
          var x;
          uids = (function() {
            var j, len1, ref1, results;
            ref1 = $scope.users;
            results = [];
            for (j = 0, len1 = ref1.length; j < len1; j++) {
              x = ref1[j];
              results.push(x.uid);
            }
            return results;
          })();
          uids.push(uid);
          return $state.go("multi_user_review_year.section", {
            section: $scope.sectionName,
            uids: uids.join("+")
          }, {});
        });
      };
      $scope.multi_review = {};
      $scope.multi_review_packet = {};
      for (j = 0, len1 = reviews.length; j < len1; j++) {
        review = reviews[j];
        uid = review.latest_review.uid;
        $scope.multi_review[uid] = Reviews.getset(review.latest_review, $scope.review_type);
        $scope.multi_review_packet[uid] = Reviews.getReviewPacketByUserAndYear(uid, $scope.review_year, $scope.review_name, $scope.review_type);
      }
      noOfUsers = $scope.users.length;
      if (noOfUsers < 30) {
        freq = null;
      } else {
        freq = 6;
      }
      Reviews.autoUpdate(resetKillSwitch = true, freq = freq);
      $scope.localtime = Utils.localtime;
      $scope.save = {
        texts: {
          saved: 'All changes saved',
          in_progress: 'Saving ..'
        },
        status: 'All changes saved'
      };
      $scope.sortOptions = {
        axis: 'x',
        revert: 100,
        forcePlaceholderSize: true,
        delay: 150,
        cursor: "move",
        tolerance: "pointer",
        cancel: '.unsortable',
        stop: function(e, ui) {
          var x;
          uids = (function() {
            var k, len2, ref1, results;
            ref1 = $scope.users;
            results = [];
            for (k = 0, len2 = ref1.length; k < len2; k++) {
              x = ref1[k];
              results.push(x.uid);
            }
            return results;
          })();
          return $state.go("multi_user_review_year.section", {
            section: $scope.sectionName,
            uids: uids.join("+")
          }, {});
        }
      };
      $scope.$watch('multi_review', function(newValue, oldValue) {
        var changed, dirtyUsers, items, k, len2, ref1, x, y;
        $scope.$on('$destroy', function() {
          var k, len2, ref1, results, user;
          if (!Auth.isAdmin() && (($scope.busyBtnDetails === Auth.getUser().uid) || (Auth.getStatus() === false))) {
            ref1 = $scope.users;
            results = [];
            for (k = 0, len2 = ref1.length; k < len2; k++) {
              user = ref1[k];
              console.debug(user.uid);
              results.push(WS.updateIsBusyReviewer(user.uid, $scope.review_year, $scope.review_name, false, "admin"));
            }
            return results;
          }
        });
        if (newValue === oldValue) {
          console.log("Comparision failed, returning ..");
          return;
        }
        y = _.map(_.zip(_.values(newValue), _.values(oldValue)), function(x) {
          return Reviews.robustReviewComparison(x[0], x[1]);
        });
        uids = (function() {
          var k, len2, ref1, results;
          ref1 = _.values(newValue);
          results = [];
          for (k = 0, len2 = ref1.length; k < len2; k++) {
            x = ref1[k];
            results.push(x.uid);
          }
          return results;
        })();
        dirtyUsers = [];
        ref1 = _.zip(uids, y);
        for (k = 0, len2 = ref1.length; k < len2; k++) {
          items = ref1[k];
          uid = items[0], changed = items[1];
          if (!changed) {
            dirtyUsers.push(uid);
          }
        }
        Reviews.setSaveReviewsFilter(dirtyUsers);
        if (dirtyUsers.length === 0) {
          console.log('No dirty users, returning ..');
          return;
        }
        Utils.showPreventNavigation();
        if ($scope.onDemandSave) {
          $timeout.cancel($scope.onDemandSave);
          Reviews.autoUpdate(resetKillSwitch = true);
        }
        Reviews.setSaveStatus('pending', $scope.review_type);
        console.log('Setting up on demand save', newValue);
        return $scope.onDemandSave = $timeout(function() {
          console.log("Dirty users", dirtyUsers);
          Reviews.saveReviews($scope.review_type);
          Utils.hidePreventNavigation();
          return Reviews.autoUpdate(resetKillSwitch = true);
        }, 1000 * 2);
      }, true);
      $window.onunload = function(event) {
        var k, len2, ref1;
        if ($scope.busyBtnDetails === ((ref1 = Auth.getUser()) != null ? ref1.uid : void 0) || (Auth.getStatus() === false) && !Auth.isAdmin()) {
          for (k = 0, len2 = review_list.length; k < len2; k++) {
            review = review_list[k];
            WS.updateIsBusyReviewer(review.split("-")[0], year, rname, false, Auth.getUser().uid);
          }
        }
      };
    }
  ]);

}).call(this);
