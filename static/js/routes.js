// Generated by CoffeeScript 1.10.0
(function() {
  "use strict";
  app.config(function($stateProvider, $urlRouterProvider) {
    var admin, adminLanding, adminMgmtLanding, authError, editingInProgress, feedback, feedbackForm, fiveHundred, fourOfour, landing, landingHome, landingLogin, multiUsersReviewByYear, multiUsersReviewByYearSection, multiUsersReviewByYearStart, nineBox, nineBoxStart, setupReviews, setupReviewsFiltered, setupTemplates, setupTemplatesPreviewTemplate, setupTemplatesPreviewTemplateRender, setupTemplatesStart, userReviewByYear, userReviewByYearPreview, userReviewByYearSection, userReviewByYearStart, userSelfReviewByYear, userSelfReviewByYearPreview, userSelfReviewByYearSection, userSelfReviewByYearStart;
    $urlRouterProvider.otherwise('404');
    landing = {
      name: "landing",
      url: '',
      template: '<ui-view/>',
      controller: function(Auth, $state) {
        var stateToGo;
        console.log('Logged In: ', Auth.getStatus());
        if (!Auth.getStatus()) {
          stateToGo = "landing.login";
          return $state.go(stateToGo, {}, {
            location: false
          });
        } else {
          stateToGo = "landing.home";
          console.log("x. Going to " + stateToGo);
          return $state.go(stateToGo, {}, {
            location: false
          });
        }
      }
    };
    landingLogin = {
      name: 'landing.login',
      url: '/login?auth_error',
      templateUrl: 'static/partials/login.html',
      controller: 'LoginCtrl'
    };
    landingHome = {
      name: 'landing.home',
      url: '/home',
      templateUrl: 'static/partials/home.html',
      controller: 'HomeCtrl',
      resolve: {
        userinfo: function(Cache) {
          return Cache.getAuthUserInfo();
        }
      }
    };
    $stateProvider.state(landing);
    $stateProvider.state(landingLogin);
    $stateProvider.state(landingHome);
    userReviewByYear = {
      name: 'user_review_year',
      url: '/review/{uid:[^/+]*}/:review_year/:review_name',
      abstract: true,
      data: {
        review_type: 'review'
      },
      template: '<ui-view/>',
      resolve: {
        userinfo: function(Cache) {
          return Cache.getAuthUserInfo();
        },
        user: function(Cache, $stateParams) {
          return Cache.getUser($stateParams.uid);
        },
        review: function(Cache, Reviews, $stateParams) {
          return Cache.getReviewByUser($stateParams.uid, $stateParams.review_year, $stateParams.review_name, 'review');
        },
        selfReview: function(Cache, Reviews, $stateParams) {
          return Cache.getReviewByUser($stateParams.uid, $stateParams.review_year, $stateParams.review_name, 'self-review');
        }
      }
    };
    userReviewByYearStart = {
      name: 'user_review_year.start',
      url: '?selfreview&validate&feedback',
      controller: function($scope, $state, $stateParams) {
        return $state.transitionTo('user_review_year.section', {
          uid: $stateParams.uid,
          review_year: $stateParams.review_year,
          review_name: $stateParams.review_name,
          section: 'ratings',
          selfreview: $stateParams.selfreview,
          validate: $stateParams.validate,
          feedback: $stateParams.feedback
        }, {
          location: false,
          inherit: true,
          relative: $state.$current,
          notify: true
        });
      }
    };
    userReviewByYearSection = {
      name: 'user_review_year.section',
      url: '/{section:(?!preview|settings$).*}?selfreview&validate&feedback',
      views: {
        '': {
          controller: 'UserCtrl',
          templateUrl: 'static/partials/user.html'
        },
        "contents@user_review_year.section": {
          controller: 'UserReviewCtrl',
          templateProvider: (function(_this) {
            return function(Cache, Template, $stateParams) {
              var rname, uid, year;
              uid = $stateParams.uid;
              year = $stateParams.review_year;
              rname = $stateParams.review_name;
              return Cache.getReviewByUser(uid, year, rname, 'review').then(function(response) {
                return response.latest_template.section[$stateParams.section].html;
              });
            };
          })(this)
        }
      },
      resolve: {
        allUsers: function(Cache) {
          return Cache.getAllUsers().then(function(response) {
            return response;
          });
        },
        allReviews: function(Cache, $stateParams) {
          return Cache.getAllReviewsForUser($stateParams.uid).then(function(response) {
            return response;
          });
        }
      }
    };
    userReviewByYearPreview = {
      name: 'user_review_year.preview',
      url: '/preview',
      views: {
        '': {
          templateUrl: 'static/partials/user.preview_wrapper.html',
          controller: 'UserReviewCtrl'
        },
        "contents@user_review_year.preview": {
          controller: 'UserReviewPreviewCtrl',
          templateProvider: (function(_this) {
            return function(Cache, Template, $state, $stateParams) {
              var review_name, review_year, template, uid;
              uid = $stateParams.uid;
              review_year = $stateParams.review_year;
              review_name = $stateParams.review_name;
              template = Cache.getReviewByUser(uid, review_year, review_name, 'review').then(function(response) {
                var sectionName, sectionTemplates, sections, str, t, templateObj;
                sections = response.latest_template.section;
                sectionTemplates = (function() {
                  var results;
                  results = [];
                  for (sectionName in sections) {
                    templateObj = sections[sectionName];
                    results.push("" + templateObj.html_mode_preview);
                  }
                  return results;
                })();
                str = "<page><preview-header></preview-header>" + sectionTemplates[0] + "</page><pagebreak></pagebreak>";
                str += ((function() {
                  var i, len, ref, results;
                  ref = sectionTemplates.slice(1);
                  results = [];
                  for (i = 0, len = ref.length; i < len; i++) {
                    t = ref[i];
                    results.push("\n<page>\n" + t + "<preview-footer></preview-footer>\n</page>");
                  }
                  return results;
                })()).join("\n\n<pagebreak></pagebreak>");
                console.log(str);
                return str;
              });
              return template;
            };
          })(this)
        }
      }
    };
    $stateProvider.state(userReviewByYear);
    $stateProvider.state(userReviewByYearStart);
    $stateProvider.state(userReviewByYearSection);
    $stateProvider.state(userReviewByYearPreview);
    multiUsersReviewByYear = {
      name: 'multi_user_review_year',
      url: '/review/{uids:[^/]*\\+[^/]*}/:review_year/:review_name',
      abstract: true,
      data: {
        review_type: 'review'
      },
      template: '<ui-view/>',
      resolve: {
        userinfo: function(Cache) {
          return Cache.getAuthUserInfo();
        },
        users: function(Cache, $q, $stateParams) {
          return $q.all($stateParams.uids.split('+').map(function(uid) {
            return Cache.getUser(uid);
          }));
        },
        reviews: function(Cache, $q, $stateParams) {
          var i, len, req, requests, rname, uid, uids, year;
          uids = $stateParams.uids.split('+');
          year = $stateParams.review_year;
          rname = $stateParams.review_name;
          requests = [];
          for (i = 0, len = uids.length; i < len; i++) {
            uid = uids[i];
            req = {
              uid: uid,
              year: year,
              rname: rname,
              review_type: 'review'
            };
            requests.push(req);
          }
          return Cache.getReviewByUserMulti(requests);
        },
        selfReviews: function(Cache, $q, Reviews, $stateParams) {
          var i, len, req, requests, rname, uid, uids, year;
          uids = $stateParams.uids.split('+');
          year = $stateParams.review_year;
          rname = $stateParams.review_name;
          requests = [];
          for (i = 0, len = uids.length; i < len; i++) {
            uid = uids[i];
            req = {
              uid: uid,
              year: year,
              rname: rname,
              review_type: 'self-review'
            };
            requests.push(req);
          }
          return Cache.getReviewByUserMulti(requests);
        }
      }
    };
    multiUsersReviewByYearStart = {
      name: 'multi_user_review_year.start',
      url: '',
      controller: function($scope, $state, $stateParams) {
        return $state.transitionTo('multi_user_review_year.section', {
          uids: $stateParams.uids,
          section: 'ratings'
        }, {
          location: false,
          inherit: true,
          relative: $state.$current,
          notify: true
        });
      }
    };
    multiUsersReviewByYearSection = {
      name: 'multi_user_review_year.section',
      url: '/:section',
      views: {
        '': {
          controller: 'MultiUserCtrl',
          templateUrl: 'static/partials/multiuser.html'
        },
        "contents@multi_user_review_year.section": {
          controller: 'MultiUserReviewCtrl',
          templateProvider: (function(_this) {
            return function(Cache, Template, $stateParams) {
              var review_name, review_year, uid, uids;
              review_year = $stateParams.review_year;
              review_name = $stateParams.review_name;
              uids = $stateParams.uids.split('+');
              uid = uids[0];
              return Cache.getReviewByUser(uid, review_year, review_name, 'review').then(function(response) {
                return response.latest_template.section[$stateParams.section].html_mode_multi;
              });
            };
          })(this)
        }
      }
    };
    $stateProvider.state(multiUsersReviewByYear);
    $stateProvider.state(multiUsersReviewByYearStart);
    $stateProvider.state(multiUsersReviewByYearSection);
    userSelfReviewByYear = {
      name: 'user_self_review_year',
      url: '/selfreview/{uid:[^/+]*}/:review_year/:review_name',
      abstract: true,
      template: '<ui-view/>',
      data: {
        review_type: 'self-review'
      },
      resolve: {
        user: function(Cache, $stateParams) {
          return Cache.getUser($stateParams.uid).then(function(response) {
            return response;
          });
        },
        review: function(Cache, Reviews, $stateParams) {
          return Cache.getReviewByUser($stateParams.uid, $stateParams.review_year, $stateParams.review_name, 'self-review');
        },
        selfReview: function(Cache, Reviews, $stateParams) {
          return Cache.getReviewByUser($stateParams.uid, $stateParams.review_year, $stateParams.review_name, 'self-review');
        },
        authCheck: function(selfReview, Auth, $state) {
          if (_.contains(_.pluck(selfReview.permitted_users, "uid"), Auth.getUser().uid) && _.isEmpty(selfReview.timeline.COMMIT_REVIEW)) {
            return $state.transitionTo('auth_error', {}, {
              location: 'replace',
              inherit: true,
              notify: true
            });
          }
        }
      }
    };
    userSelfReviewByYearStart = {
      name: 'user_self_review_year.start',
      url: '?validate',
      controller: function($scope, $state, $stateParams) {
        return $state.transitionTo('user_self_review_year.section', {
          uid: $stateParams.uid,
          section: 'ratings',
          validate: $stateParams.validate
        }, {
          location: false,
          inherit: true,
          relative: $state.$current,
          notify: true
        });
      }
    };
    userSelfReviewByYearSection = {
      name: 'user_self_review_year.section',
      url: '/{section:(?!preview|settings$).*}?validate',
      views: {
        '': {
          controller: 'UserCtrl',
          templateUrl: 'static/partials/user.html'
        },
        "contents@user_self_review_year.section": {
          controller: 'UserReviewCtrl',
          templateProvider: (function(_this) {
            return function(Cache, Template, $stateParams) {
              var review_name, review_year, uid;
              uid = $stateParams.uid;
              review_year = $stateParams.review_year;
              review_name = $stateParams.review_name;
              return Cache.getReviewByUser(uid, review_year, review_name, 'self-review').then(function(response) {
                return response.latest_template.section[$stateParams.section].html;
              });
            };
          })(this)
        }
      },
      resolve: {
        allUsers: function(Cache) {
          return Cache.getAllUsers().then(function(response) {
            return response;
          });
        },
        allReviews: function(Cache, $stateParams) {
          return Cache.getAllReviewsForUser($stateParams.uid).then(function(response) {
            return response;
          });
        }
      }
    };
    userSelfReviewByYearPreview = {
      name: 'user_self_review_year.preview',
      url: '/preview',
      views: {
        '': {
          templateUrl: 'static/partials/user.preview_wrapper.html',
          controller: 'UserReviewCtrl'
        },
        "contents@user_self_review_year.preview": {
          controller: 'UserReviewPreviewCtrl',
          templateProvider: (function(_this) {
            return function(Cache, Template, $stateParams) {
              var review_name, review_year, template, uid;
              uid = $stateParams.uid;
              review_year = $stateParams.review_year;
              review_name = $stateParams.review_name;
              template = Cache.getReviewByUser(uid, review_year, review_name, 'self-review').then(function(response) {
                var sectionName, sectionTemplates, sections, str, t, templateObj;
                sections = response.latest_template.section;
                sectionTemplates = (function() {
                  var results;
                  results = [];
                  for (sectionName in sections) {
                    templateObj = sections[sectionName];
                    results.push("" + templateObj.html_mode_preview);
                  }
                  return results;
                })();
                str = "<page><preview-header></preview-header>" + sectionTemplates[0] + "</page><pagebreak></pagebreak>";
                str += ((function() {
                  var i, len, ref, results;
                  ref = sectionTemplates.slice(1);
                  results = [];
                  for (i = 0, len = ref.length; i < len; i++) {
                    t = ref[i];
                    results.push("\n<page>" + t + "</page>");
                  }
                  return results;
                })()).join("\n\n<pagebreak></pagebreak>");
                console.log(str);
                return str;
              });
              return template;
            };
          })(this)
        }
      }
    };
    $stateProvider.state(userSelfReviewByYear);
    $stateProvider.state(userSelfReviewByYearStart);
    $stateProvider.state(userSelfReviewByYearSection);
    $stateProvider.state(userSelfReviewByYearPreview);
    nineBoxStart = {
      name: '9box.start',
      url: '',
      templateUrl: 'static/partials/9box.html',
      controller: '9BoxCtrl'
    };
    nineBox = {
      name: '9box',
      url: '/9box/{uids:[^/]*}/:review_year/:review_name',
      abstract: true,
      template: '<ui-view/>',
      data: {
        review_type: 'review'
      },
      resolve: {
        userinfo: function(Cache) {
          return Cache.getAuthUserInfo();
        },
        users: function(Cache, $q, $stateParams) {
          return $q.all($stateParams.uids.split('+').map(function(uid) {
            return Cache.getUser(uid);
          }));
        },
        reviews: function(Cache, $q, $stateParams) {
          var i, len, req, requests, rname, uid, uids, year;
          uids = $stateParams.uids.split('+');
          year = $stateParams.review_year;
          rname = $stateParams.review_name;
          requests = [];
          for (i = 0, len = uids.length; i < len; i++) {
            uid = uids[i];
            req = {
              uid: uid,
              year: year,
              rname: rname,
              review_type: 'review'
            };
            requests.push(req);
          }
          return Cache.getReviewByUserMulti(requests);
        },
        selfReviews: function(Cache, $q, Reviews, $stateParams) {
          var i, len, req, requests, rname, uid, uids, year;
          uids = $stateParams.uids.split('+');
          year = $stateParams.review_year;
          rname = $stateParams.review_name;
          requests = [];
          for (i = 0, len = uids.length; i < len; i++) {
            uid = uids[i];
            req = {
              uid: uid,
              year: year,
              rname: rname,
              review_type: 'self-review'
            };
            requests.push(req);
          }
          return Cache.getReviewByUserMulti(requests);
        },
        template: function(Cache, $stateParams, Template) {
          var rname, uid, uids, year;
          uids = $stateParams.uids.split('+');
          uid = uids[0];
          year = $stateParams.review_year;
          rname = $stateParams.review_name;
          return Cache.getReviewByUser(uid, year, rname, 'review').then(function(response) {
            var templateID;
            templateID = response.latest_template.template_id;
            return Template.getTemplate(templateID, year, rname);
          });
        }
      }
    };
    $stateProvider.state(nineBox);
    $stateProvider.state(nineBoxStart);
    feedback = {
      name: 'feedback',
      url: '/feedback',
      abstract: true,
      template: '<ui-view/>'
    };
    feedbackForm = {
      name: 'feedback.form',
      url: '/{uids:[^/]+}',
      templateUrl: 'static/partials/feedback.form.html',
      controller: 'FeedbackFormCtrl',
      resolve: {
        users: function(Cache, $q, $stateParams) {
          return $q.all($stateParams.uids.split('+').map(function(uid) {
            return Cache.getUser(uid);
          }));
        },
        feedbacks: function(Cache, $q, $stateParams) {
          return $q.all($stateParams.uids.split('+').map(function(uid) {
            return Cache.getFeedback(uid);
          }));
        }
      }
    };
    $stateProvider.state(feedback);
    $stateProvider.state(feedbackForm);
    admin = {
      name: 'admin',
      url: '/admin',
      abstract: true,
      template: '<ui-view/>'
    };
    adminMgmtLanding = {
      name: 'admin.mgmt',
      url: '/manage',
      templateUrl: 'static/partials/adminMgmt.html',
      controller: 'AdminMgmtCtrl',
      resolve: {
        allAdmins: function(Cache) {
          return Cache.getAllAdmins().then(function(response) {
            return response;
          });
        },
        allUsers: function(Portal, Auth) {
          return Portal.getAllUsersByLocation(Auth.getUser().organization).then(function(response) {
            return response;
          });
        }
      }
    };
    adminLanding = {
      name: 'admin.landing',
      url: '',
      templateUrl: 'static/partials/admin.html',
      controller: 'AdminCtrl',
      resolve: {
        adminData: function(Cache, $stateParams) {
          return Cache.getAdminData();
        },
        allUsers: function(Cache) {
          return Cache.getAllUsers().then(function(response) {
            return response;
          });
        }
      }
    };
    setupReviews = {
      name: 'admin.reviews',
      url: '^/setup/reviews/:review_year/:review_name?desc&filter',
      templateUrl: 'static/partials/setup.reviews.html',
      controller: 'SetupReviewsCtrl',
      resolve: {
        allUsers: function(Cache) {
          return Cache.getAllUsers().then(function(response) {
            return response;
          });
        },
        allTemplates: function(Template, $stateParams) {
          return Template.getAllTemplateTypes($stateParams.review_year, $stateParams.review_name);
        },
        allReviews: function(Cache, $stateParams) {
          return Cache.getAllReviewsByYear($stateParams.review_year, $stateParams.review_name);
        }
      }
    };
    setupReviewsFiltered = {
      name: 'admin.reviews.filtered',
      url: '',
      controller: function() {
        var inherit;
        return $state.transitionTo('admin.reviews', {
          filter: resultFilter,
          review_year: review_year,
          review_name: review_name
        }, {
          location: true
        }, inherit = true, {
          relative: $state.$current,
          notify: true
        });
      }
    };
    setupTemplates = {
      name: 'admin.templates',
      url: '^/setup/templates/:review_year/:review_name',
      abstract: true,
      template: '<ui-view/>'
    };
    setupTemplatesStart = {
      name: 'admin.templates.start',
      url: '',
      templateUrl: 'static/partials/setup.templates.html',
      controller: 'SetupTemplatesCtrl',
      resolve: {
        allUsers: function(Cache) {
          return Cache.getAllUsers().then(function(response) {
            return response;
          });
        },
        allTemplates: function(Template, $stateParams) {
          return Template.getAllTemplateTypes($stateParams.review_year, $stateParams.review_name);
        },
        allReviews: function(Cache, $stateParams) {
          return Cache.getAllReviewsByYear($stateParams.review_year, $stateParams.review_name);
        }
      }
    };
    setupTemplatesPreviewTemplate = {
      name: 'admin.templates.preview_template',
      url: '/preview',
      data: {
        review_type: 'weights-performance'
      },
      abstract: true,
      template: '<ui-view/>'
    };
    setupTemplatesPreviewTemplateRender = {
      name: 'admin.templates.preview_template.render',
      url: '?template_id&section&review_type',
      resolve: {
        allUsers: function(Cache) {
          return Cache.getAllUsers().then(function(response) {
            return response;
          });
        },
        user: function(Cache, $stateParams, Auth) {
          return Cache.getUser(Auth.getUser().uid);
        },
        review: function(Cache, $stateParams, Auth) {
          if ($stateParams.review_type == null) {
            $stateParams.review_type = "weights-performance";
          }
          return Cache.getReviewByUser($stateParams.template_id, $stateParams.review_year, $stateParams.review_name, $stateParams.review_type);
        },
        selfReview: function(Cache, $stateParams, Auth) {
          if ($stateParams.review_type == null) {
            $stateParams.review_type = "weights-performance";
          }
          return Cache.getReviewByUser($stateParams.template_id, $stateParams.review_year, $stateParams.review_name, $stateParams.review_type);
        },
        allReviews: function(Cache, $stateParams, Auth) {
          return Cache.getAllReviewsForUser(Auth.getUser().uid).then(function(response) {
            return response;
          });
        }
      },
      views: {
        '': {
          controller: 'UserCtrl',
          templateUrl: 'static/partials/setup.templates.preview.html'
        },
        "contents@admin.templates.preview_template.render": {
          controller: 'UserReviewCtrl',
          templateProvider: (function(_this) {
            return function(Template, $state, $stateParams) {
              var rname, template_id, year;
              template_id = $stateParams.template_id;
              year = $stateParams.review_year;
              rname = $stateParams.review_name;
              if ($stateParams.section == null) {
                $stateParams.section = "ratings";
              }
              if ($stateParams.review_type == null) {
                $stateParams.review_type = "weights-performance";
              }
              return Template.getTemplate(template_id, year, rname).then(function(response) {
                return response.contents.section[$stateParams.section].html;
              });
            };
          })(this)
        }
      }
    };
    $stateProvider.state(admin);
    $stateProvider.state(adminLanding);
    $stateProvider.state(adminMgmtLanding);
    $stateProvider.state(setupReviews);
    $stateProvider.state(setupReviewsFiltered);
    $stateProvider.state(setupTemplates);
    $stateProvider.state(setupTemplatesStart);
    $stateProvider.state(setupTemplatesPreviewTemplate);
    $stateProvider.state(setupTemplatesPreviewTemplateRender);
    fourOfour = {
      name: '404',
      url: '/404',
      templateUrl: 'static/partials/404.html'
    };
    authError = {
      name: 'auth_error',
      url: '/denied',
      templateUrl: 'static/partials/autherror.html',
      controller: 'AuthErrorCtrl',
      data: {
        rejectState: 'x',
        rejectParams: 'y'
      }
    };
    editingInProgress = {
      name: 'editing_in_progress',
      url: '/wait',
      controller: 'AcquireReviewLockCtrl',
      templateUrl: 'static/partials/editingInProgress.html',
      params: {
        isCurrentlyEditedBy: null
      }
    };
    fiveHundred = {
      name: 'error',
      url: '/fatal',
      templateUrl: 'static/partials/500.html'
    };
    $stateProvider.state(fourOfour);
    $stateProvider.state(editingInProgress);
    $stateProvider.state(authError);
    $stateProvider.state(fiveHundred);
  });

}).call(this);
