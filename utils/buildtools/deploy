#!/usr/local/bin/python
# ----------------------------------------------------------------------
# TM and (c) 2009 DreamWorks Animation LLC.  All Rights Reserved.
# Reproduction in whole or in part without prior written permission of a
# duly authorized representative is prohibited.
# ----------------------------------------------------------------------
"""
Application module for deploy.py
"""
__version__ = "$Id: deploy.py,v 1.15 2008/04/01 01:31:32 jono Exp $"
__source__ = "$Source: /rel/cvsroot/cmd/src_cmd/src_create/templates/python_program/deploy.py,v $"
__author__ = "Jeffrey Jose"

# Python Modules
import sys, os
import string

# Studio Modules
import studioenv
import studio.framework.app

from studio.ani import Ani
from studio.adb import Adb
from studio import io
from studio.utils.path import Path

# Critiq Modules
import gitutils

TAG_MESSAGES = {'major': 'Major release',
                'minor': 'Minor release',
                'patch': 'Hotfix release',
               }

class App(studio.framework.app.App):
    """
    """

    mockSafe = True
    mockInfo = "Print stuff, but dont do anything crazy"

    def addCmdlineFlags(self, cl):
        """Adds command line flags to the application.

        :Parameters:
            cl
                Instance of an studio.utils.cmdline object.
        """
        super(App, self).addCmdlineFlags(cl)

        cl.addFlag('-release_type <major/minor/{patch,hotfix}>', 'Specify the type of release. Either major/minor/{patch,hotfix}', default = "minor")
        cl.addFlag('-release_branch <name>', 'Name of the release branch', default = "develop")

        cl.addFlag('-alt_release_message <message>', 'Specify an alternate release heading (like Beta Testers Release/Initial Public Release)')

        cl.addFlag('-branch <name>', 'Name of prod branch', default = "master")

    def configureOptions(self, opts):
        """Configures the application options.

        :Parameters:
            opts
                Dictionary of options parsed from command line flags.
        """

        opts = super(App, self).configureOptions(opts)

        if opts['release_type'] not in ['major', 'minor', 'patch', 'hotfix']:
            raise ValueError('-release_type cannot be something other than "major", "minor" or "patch/hotfix"')

        if opts['release_type'] == "hotfix":
            opts['release_type'] = "patch"

        return opts


    def validateBranch(self, branch):
        '''
        Ensures we are in the right branch.
        '''
        currentBranch = gitutils.getCurrentBranch()

        if branch != currentBranch:
            raise ValueError()

    def getNextIterationInfo(self):

        lastTag, lastCommit = gitutils.getAllTags()[0]

        try:
            lastVersion = lastTag.strip(string.ascii_letters)
        except:
            # We reach here if we're doing this for the first time
            lastVersion = '0.0'

        try:
            major, minor, patch = lastVersion.split('.')
        except:
            major, minor = lastVersion.split('.')
            patch = None

        if self.opts['release_type'] == "major":
            nextMajor = int(major) + 1
            nextMinor = 0
            nextPatch = None
        elif self.opts['release_type'] == "minor":
            nextMajor = major
            nextMinor = int(minor) + 1
            nextPatch    = None
        elif self.opts['release_type'] == "patch":
            nextMajor = major
            nextMinor = minor
            if patch:
                nextPatch = int(patch) + 1
            else:
                nextPatch = 1

        if nextPatch:
            nextVersion = "%s.%s.%s" % (nextMajor, nextMinor, nextPatch)
        else:
            nextVersion = "%s.%s" % (nextMajor, nextMinor)

        nextTag = "v%s" % nextVersion
        if self.opts['alt_release_message']:
            nextTagMessage = self.opts['alt_release_message']
        else:
            nextTagMessage = TAG_MESSAGES[self.opts['release_type']]

        io.info('lastTag: %s' % lastTag)
        io.info('nextTag: %s (%s)' % (nextTag, nextTagMessage))
        return nextVersion, nextTag, nextTagMessage

    def mergeReleaseBranch(self, branch, fastForward = False):

        io.write('')
        io.write('               Merging: %s* <- %s' % (gitutils.getCurrentBranch(), branch) )
        if not self.opts['mock']:
            gitutils.mergeBranch(branch, fastForward = fastForward)

        return gitutils.getCurrentCommit()


    def fastForward(self, branch, targetBranch):

        io.write('')
        io.write('               Syncing: %s <= %s' % (branch, targetBranch))
        if not self.opts['mock']:
            gitutils.checkoutBranch(branch)
            gitutils.mergeBranch(targetBranch, fastForward = True)

        return gitutils.getCurrentCommit()


    def addNextTag(self, tag, message):

        io.write('               Tagging: %s (%s)' % (tag, message))
        if not self.opts['mock']:
            gitutils.addTag(tag, message)

    def main(self):
        """Application entry point."""
        super(App, self).main()

        buildBranch = self.opts['branch']

        try:
            self.validateBranch(buildBranch)
        except ValueError, e:
            message = "\n\n\t-------------------------------------------------------------------------------------------\n"
            message += "\t                       You're not in the correct build branch for the build.\n"
            message += "\t-------------------------------------------------------------------------------------------\n"
            message += "\t                            current (WRONG): %s\n" % gitutils.getCurrentBranch()
            message += "\t                     build branch (CORRECT): %s\n" % buildBranch
            message += "\n\t        change to the build branch by 'git checkout %s' or override by -branch" % buildBranch
            message += "\n\t-------------------------------------------------------------------------------------------\n"

            raise ValueError(message)
        else:
            io.write('Validated Build Branch: %s' % buildBranch)

        nextVersion, nextTag, nextTagMessage = self.getNextIterationInfo()

        originalCommit = gitutils.getCurrentCommit()
        mergeCommit    = self.mergeReleaseBranch(self.opts['release_branch'])

        if originalCommit == mergeCommit and not self.opts['mock']:
            io.write('Merge not required. Skip tagging.')
        else:
            self.addNextTag(nextTag, nextTagMessage)

        # Now that we've merged and tagged, push release_branch to this new tag
        self.fastForward(self.opts['release_branch'], gitutils.getCurrentBranch())

if __name__ == '__main__':
    App().run()


# ----------------------------------------------------------------------
# TM and (c) 2009 DreamWorks Animation LLC.  All Rights Reserved.
# Reproduction in whole or in part without prior written permission of a
# duly authorized representative is prohibited.
# ----------------------------------------------------------------------
